package calculator

type IncomePerBracketAfterStandardDeductionAndContributionsMarriedSeparateCalculation SequenceCalculation

type IncomePerBracketAfterStandardDeductionAndContributionsMarriedSeparate struct {
	AbstractIncomePerBracketAfterStandardDeductionAndContributionsCalculation
}

func NewIncomePerBracketAfterStandardDeductionAndContributionsMarriedSeparate() IncomePerBracketAfterStandardDeductionAndContributionsMarriedSeparate {
	return IncomePerBracketAfterStandardDeductionAndContributionsMarriedSeparate{
		AbstractIncomePerBracketAfterStandardDeductionAndContributionsCalculation: NewAbstractIncomePerBracketAfterStandardDeductionAndContributions(),
	}
}

func (c IncomePerBracketAfterStandardDeductionAndContributionsMarriedSeparate) CalculateTraditional(model *Model) []float64 {
	return c.AbstractIncomePerBracketAfterStandardDeductionAndContributionsCalculation.CalculateTraditional(model, model.MarriedSeparateTaxRates)
}

func (c IncomePerBracketAfterStandardDeductionAndContributionsMarriedSeparate) CalculateTraditionalRetirement(model *Model) []float64 {
	return c.AbstractIncomePerBracketAfterStandardDeductionAndContributionsCalculation.CalculateTraditionalRetirement(model, model.MarriedSeparateTaxRates)
}

func (c IncomePerBracketAfterStandardDeductionAndContributionsMarriedSeparate) CalculateRoth(model *Model) []float64 {
	return c.AbstractIncomePerBracketAfterStandardDeductionAndContributionsCalculation.CalculateRoth(model, model.MarriedSeparateTaxRates)
}

func (c IncomePerBracketAfterStandardDeductionAndContributionsMarriedSeparate) CalculateRothRetirement(model *Model) []float64 {
	return c.AbstractIncomePerBracketAfterStandardDeductionAndContributionsCalculation.CalculateRothRetirement(model, model.MarriedSeparateTaxRates)
}
