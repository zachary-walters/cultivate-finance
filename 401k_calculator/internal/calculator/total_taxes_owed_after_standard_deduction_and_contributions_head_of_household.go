package calculator

type TotalTaxesOwedAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation Calculation

type TotalTaxesOwedAfterStandardDeductionAndContributionsHeadOfHousehold struct {
	TaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation
}

func NewTotalTaxesOwedAfterStandardDeductionAndContributionsHeadOfHousehold() TotalTaxesOwedAfterStandardDeductionAndContributionsHeadOfHousehold {
	return TotalTaxesOwedAfterStandardDeductionAndContributionsHeadOfHousehold{
		TaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation: NewTaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold(),
	}
}

func (c TotalTaxesOwedAfterStandardDeductionAndContributionsHeadOfHousehold) CalculateTraditional(model *Model) float64 {
	taxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation.CalculateTraditional(model)

	totalTaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold := 0.0
	for _, value := range taxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold {
		totalTaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold += value
	}

	return totalTaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold
}

func (c TotalTaxesOwedAfterStandardDeductionAndContributionsHeadOfHousehold) CalculateTraditionalRetirement(model *Model) float64 {
	return 0.0
}

func (c TotalTaxesOwedAfterStandardDeductionAndContributionsHeadOfHousehold) CalculateRoth(model *Model) float64 {
	taxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation.CalculateRoth(model)

	totalTaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold := 0.0
	for _, value := range taxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold {
		totalTaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold += value
	}

	return totalTaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold
}

func (c TotalTaxesOwedAfterStandardDeductionAndContributionsHeadOfHousehold) CalculateRothRetirement(model *Model) float64 {
	return 0.0
}
