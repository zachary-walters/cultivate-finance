package calculator

type TaxesOwedPerBracketAfterStandardDeductionAndContributionsCalculation SequenceCalculation

type TaxesOwedPerBracketAfterStandardDeductionAndContributions struct {
	TaxesOwedPerBracketAfterStandardDeductionAndContributionsSingleCalculation
	TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedJointCalculation
	TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperateCalculation
	TaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation
}

func NewTaxesOwedPerBracketAfterStandardDeductionAndContributions() TaxesOwedPerBracketAfterStandardDeductionAndContributions {
	return TaxesOwedPerBracketAfterStandardDeductionAndContributions{
		TaxesOwedPerBracketAfterStandardDeductionAndContributionsSingleCalculation:          NewTaxesOwedPerBracketAfterStandardDeductionAndContributionsSingle(),
		TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedJointCalculation:    NewTaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedJoint(),
		TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperateCalculation: NewTaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperate(),
		TaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation: NewTaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold(),
	}
}

func (c TaxesOwedPerBracketAfterStandardDeductionAndContributions) Calculate(model Model) []float64 {
	taxesOwedPerBracketAfterStandardDeductionAndContributionsSingle := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsSingleCalculation.Calculate(model)
	taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedJoint := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedJointCalculation.Calculate(model)
	taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperate := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperateCalculation.Calculate(model)
	taxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation.Calculate(model)

	switch model.Input.CurrentFilingStatus {
	case "single":
		return taxesOwedPerBracketAfterStandardDeductionAndContributionsSingle
	case "married-joint":
		return taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedJoint
	case "married-seperate":
		return taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperate
	case "head-of-household":
		return taxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold
	default:
		return nil
	}
}

func (c TaxesOwedPerBracketAfterStandardDeductionAndContributions) CalculateRetirement(model Model) []float64 {
	taxesOwedPerBracketAfterStandardDeductionAndContributionsSingle := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsSingleCalculation.CalculateRetirement(model)
	taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedJoint := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedJointCalculation.CalculateRetirement(model)
	taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperate := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperateCalculation.CalculateRetirement(model)
	taxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation.CalculateRetirement(model)

	switch model.Input.RetirementFilingStatus {
	case "single":
		return taxesOwedPerBracketAfterStandardDeductionAndContributionsSingle
	case "married-joint":
		return taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedJoint
	case "married-seperate":
		return taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperate
	case "head-of-household":
		return taxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold
	default:
		return nil
	}
}
