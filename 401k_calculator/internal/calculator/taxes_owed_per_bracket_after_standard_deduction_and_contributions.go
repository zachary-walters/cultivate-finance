package calculator

type TaxesOwedPerBracketAfterStandardDeductionAndContributionsCalculation SequenceCalculation

type TaxesOwedPerBracketAfterStandardDeductionAndContributions struct {
	TaxesOwedPerBracketAfterStandardDeductionAndContributionsSingleCalculation
	TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedJointCalculation
	TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperateCalculation
	TaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation
}

func NewTaxesOwedPerBracketAfterStandardDeductionAndContributions() TaxesOwedPerBracketAfterStandardDeductionAndContributions {
	return TaxesOwedPerBracketAfterStandardDeductionAndContributions{
		TaxesOwedPerBracketAfterStandardDeductionAndContributionsSingleCalculation:          NewTaxesOwedPerBracketAfterStandardDeductionAndContributionsSingle(),
		TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedJointCalculation:    NewTaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedJoint(),
		TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperateCalculation: NewTaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperate(),
		TaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation: NewTaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold(),
	}
}

func (c TaxesOwedPerBracketAfterStandardDeductionAndContributions) CalculateTraditional(model *Model) []float64 {
	taxesOwedPerBracketAfterStandardDeductionAndContributionsSingle := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsSingleCalculation.CalculateTraditional(model)
	taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedJoint := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedJointCalculation.CalculateTraditional(model)
	taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperate := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperateCalculation.CalculateTraditional(model)
	taxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation.CalculateTraditional(model)

	switch model.Input.CurrentFilingStatus {
	case "single":
		return taxesOwedPerBracketAfterStandardDeductionAndContributionsSingle
	case "married-joint":
		return taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedJoint
	case "married-seperate":
		return taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperate
	case "head-of-household":
		return taxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold
	default:
		return nil
	}
}

func (c TaxesOwedPerBracketAfterStandardDeductionAndContributions) CalculateTraditionalRetirement(model *Model) []float64 {
	taxesOwedPerBracketAfterStandardDeductionAndContributionsSingle := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsSingleCalculation.CalculateTraditionalRetirement(model)
	taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedJoint := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedJointCalculation.CalculateTraditionalRetirement(model)
	taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperate := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperateCalculation.CalculateTraditionalRetirement(model)
	taxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation.CalculateTraditionalRetirement(model)

	switch model.Input.RetirementFilingStatus {
	case "single":
		return taxesOwedPerBracketAfterStandardDeductionAndContributionsSingle
	case "married-joint":
		return taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedJoint
	case "married-seperate":
		return taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperate
	case "head-of-household":
		return taxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold
	default:
		return nil
	}
}

func (c TaxesOwedPerBracketAfterStandardDeductionAndContributions) CalculateRoth(model *Model) []float64 {
	taxesOwedPerBracketAfterStandardDeductionAndContributionsSingle := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsSingleCalculation.CalculateRoth(model)
	taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedJoint := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedJointCalculation.CalculateRoth(model)
	taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperate := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperateCalculation.CalculateRoth(model)
	taxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation.CalculateRoth(model)

	switch model.Input.CurrentFilingStatus {
	case "single":
		return taxesOwedPerBracketAfterStandardDeductionAndContributionsSingle
	case "married-joint":
		return taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedJoint
	case "married-seperate":
		return taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperate
	case "head-of-household":
		return taxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold
	default:
		return nil
	}
}

func (c TaxesOwedPerBracketAfterStandardDeductionAndContributions) CalculateRothRetirement(model *Model) []float64 {
	taxesOwedPerBracketAfterStandardDeductionAndContributionsSingle := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsSingleCalculation.CalculateRothRetirement(model)
	taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedJoint := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedJointCalculation.CalculateRothRetirement(model)
	taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperate := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperateCalculation.CalculateRothRetirement(model)
	taxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation.CalculateRothRetirement(model)

	switch model.Input.RetirementFilingStatus {
	case "single":
		return taxesOwedPerBracketAfterStandardDeductionAndContributionsSingle
	case "married-joint":
		return taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedJoint
	case "married-seperate":
		return taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperate
	case "head-of-household":
		return taxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold
	default:
		return nil
	}
}
