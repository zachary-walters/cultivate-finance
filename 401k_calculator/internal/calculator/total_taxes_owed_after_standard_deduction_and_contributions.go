package calculator

type TotalTaxesOwedAfterStandardDeductionAndContributionsCalculation Calculation

type TotalTaxesOwedAfterStandardDeductionAndContributions struct {
	TotalTaxesOwedAfterStandardDeductionAndContributionsSingleCalculation
	TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedJointCalculation
	TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeperateCalculation
	TotalTaxesOwedAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation
}

func NewTotalTaxesOwedAfterStandardDeductionAndContributions() TotalTaxesOwedAfterStandardDeductionAndContributions {
	return TotalTaxesOwedAfterStandardDeductionAndContributions{
		TotalTaxesOwedAfterStandardDeductionAndContributionsSingleCalculation:          NewTotalTaxesOwedAfterStandardDeductionAndContributionsSingle(),
		TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedJointCalculation:    NewTotalTaxesOwedAfterStandardDeductionAndContributionsMarriedJoint(),
		TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeperateCalculation: NewTotalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeperate(),
		TotalTaxesOwedAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation: NewTotalTaxesOwedAfterStandardDeductionAndContributionsHeadOfHousehold(),
	}
}

func (c TotalTaxesOwedAfterStandardDeductionAndContributions) CalculateTraditional(model *Model) float64 {
	totalTaxesOwedAfterStandardDeductionAndContributionsSingle := c.TotalTaxesOwedAfterStandardDeductionAndContributionsSingleCalculation.CalculateTraditional(model)
	totalTaxesOwedAfterStandardDeductionAndContributionsMarriedJoint := c.TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedJointCalculation.CalculateTraditional(model)
	totalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeperate := c.TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeperateCalculation.CalculateTraditional(model)
	totalTaxesOwedAfterStandardDeductionAndContributionsHeadOfHousehold := c.TotalTaxesOwedAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation.CalculateTraditional(model)

	switch model.Input.CurrentFilingStatus {
	case "single":
		return totalTaxesOwedAfterStandardDeductionAndContributionsSingle
	case "married-joint":
		return totalTaxesOwedAfterStandardDeductionAndContributionsMarriedJoint
	case "married-seperate":
		return totalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeperate
	case "head-of-household":
		return totalTaxesOwedAfterStandardDeductionAndContributionsHeadOfHousehold
	default:
		return 0.0
	}
}

func (c TotalTaxesOwedAfterStandardDeductionAndContributions) CalculateTraditionalRetirement(model *Model) float64 {
	return c.CalculateTraditional(model)
}

func (c TotalTaxesOwedAfterStandardDeductionAndContributions) CalculateRoth(model *Model) float64 {
	totalTaxesOwedAfterStandardDeductionAndContributionsSingle := c.TotalTaxesOwedAfterStandardDeductionAndContributionsSingleCalculation.CalculateRoth(model)
	totalTaxesOwedAfterStandardDeductionAndContributionsMarriedJoint := c.TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedJointCalculation.CalculateRoth(model)
	totalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeperate := c.TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeperateCalculation.CalculateRoth(model)
	totalTaxesOwedAfterStandardDeductionAndContributionsHeadOfHousehold := c.TotalTaxesOwedAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation.CalculateRoth(model)

	switch model.Input.RetirementFilingStatus {
	case "single":
		return totalTaxesOwedAfterStandardDeductionAndContributionsSingle
	case "married-joint":
		return totalTaxesOwedAfterStandardDeductionAndContributionsMarriedJoint
	case "married-seperate":
		return totalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeperate
	case "head-of-household":
		return totalTaxesOwedAfterStandardDeductionAndContributionsHeadOfHousehold
	default:
		return 0.0
	}
}

func (c TotalTaxesOwedAfterStandardDeductionAndContributions) CalculateRothRetirement(model *Model) float64 {
	return c.CalculateTraditionalRetirement(model)
}
