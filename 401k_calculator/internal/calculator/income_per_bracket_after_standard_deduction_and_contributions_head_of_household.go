package calculator

type IncomePerBracketAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation SequenceCalculation

type IncomePerBracketAfterStandardDeductionAndContributionsHeadOfHousehold struct {
	AbstractIncomePerBracketAfterStandardDeductionAndContributionsCalculation
}

func NewIncomePerBracketAfterStandardDeductionAndContributionsHeadOfHousehold() IncomePerBracketAfterStandardDeductionAndContributionsHeadOfHousehold {
	return IncomePerBracketAfterStandardDeductionAndContributionsHeadOfHousehold{
		AbstractIncomePerBracketAfterStandardDeductionAndContributionsCalculation: NewAbstractIncomePerBracketAfterStandardDeductionAndContributions(),
	}
}

func (c IncomePerBracketAfterStandardDeductionAndContributionsHeadOfHousehold) CalculateTraditional(model Model) []float64 {
	return c.AbstractIncomePerBracketAfterStandardDeductionAndContributionsCalculation.CalculateTraditional(model, model.HeadOfHouseholdTaxRates)
}

func (c IncomePerBracketAfterStandardDeductionAndContributionsHeadOfHousehold) CalculateTraditionalRetirement(model Model) []float64 {
	return c.AbstractIncomePerBracketAfterStandardDeductionAndContributionsCalculation.CalculateTraditionalRetirement(model, model.HeadOfHouseholdTaxRates)
}

func (c IncomePerBracketAfterStandardDeductionAndContributionsHeadOfHousehold) CalculateRoth(model Model) []float64 {
	return c.AbstractIncomePerBracketAfterStandardDeductionAndContributionsCalculation.CalculateRoth(model, model.HeadOfHouseholdTaxRates)
}

func (c IncomePerBracketAfterStandardDeductionAndContributionsHeadOfHousehold) CalculateRothRetirement(model Model) []float64 {
	return c.AbstractIncomePerBracketAfterStandardDeductionAndContributionsCalculation.CalculateRothRetirement(model, model.HeadOfHouseholdTaxRates)
}
