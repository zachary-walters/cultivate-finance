package calculator

type IncomePerBracketAfterStandardDeductionAndContributionsCalculation SequenceCalculation

type IncomePerBracketAfterStandardDeductionAndContributions struct {
	IncomePerBracketAfterStandardDeductionAndContributionsSingleCalculation
	IncomePerBracketAfterStandardDeductionAndContributionsMarriedJointCalculation
	IncomePerBracketAfterStandardDeductionAndContributionsMarriedSeperateCalculation
	IncomePerBracketAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation
}

func NewIncomePerBracketAfterStandardDeductionAndContributions() IncomePerBracketAfterStandardDeductionAndContributions {
	return IncomePerBracketAfterStandardDeductionAndContributions{
		IncomePerBracketAfterStandardDeductionAndContributionsSingleCalculation:          NewIncomePerBracketAfterStandardDeductionAndContributionsSingle(),
		IncomePerBracketAfterStandardDeductionAndContributionsMarriedJointCalculation:    NewIncomePerBracketAfterStandardDeductionAndContributionsMarriedJoint(),
		IncomePerBracketAfterStandardDeductionAndContributionsMarriedSeperateCalculation: NewIncomePerBracketAfterStandardDeductionAndContributionsMarriedSeperate(),
		IncomePerBracketAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation: NewIncomePerBracketAfterStandardDeductionAndContributionsHeadOfHousehold(),
	}
}

func (c IncomePerBracketAfterStandardDeductionAndContributions) CalculateTraditional(model *Model) []float64 {
	incomePerBracketAfterStandardDeductionAndContributionsSingle := c.IncomePerBracketAfterStandardDeductionAndContributionsSingleCalculation.CalculateTraditional(model)
	incomePerBracketAfterStandardDeductionAndContributionsMarriedJoint := c.IncomePerBracketAfterStandardDeductionAndContributionsMarriedJointCalculation.CalculateTraditional(model)
	incomePerBracketAfterStandardDeductionAndContributionsMarriedSeperate := c.IncomePerBracketAfterStandardDeductionAndContributionsMarriedSeperateCalculation.CalculateTraditional(model)
	incomePerBracketAfterStandardDeductionAndContributionsHeadOfHousehold := c.IncomePerBracketAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation.CalculateTraditional(model)

	switch model.Input.CurrentFilingStatus {
	case "single":
		return incomePerBracketAfterStandardDeductionAndContributionsSingle
	case "married-joint":
		return incomePerBracketAfterStandardDeductionAndContributionsMarriedJoint
	case "married-seperate":
		return incomePerBracketAfterStandardDeductionAndContributionsMarriedSeperate
	case "head-of-household":
		return incomePerBracketAfterStandardDeductionAndContributionsHeadOfHousehold
	default:
		return nil
	}
}

func (c IncomePerBracketAfterStandardDeductionAndContributions) CalculateTraditionalRetirement(model *Model) []float64 {
	incomePerBracketAfterStandardDeductionAndContributionsSingle := c.IncomePerBracketAfterStandardDeductionAndContributionsSingleCalculation.CalculateTraditionalRetirement(model)
	incomePerBracketAfterStandardDeductionAndContributionsMarriedJoint := c.IncomePerBracketAfterStandardDeductionAndContributionsMarriedJointCalculation.CalculateTraditionalRetirement(model)
	incomePerBracketAfterStandardDeductionAndContributionsMarriedSeperate := c.IncomePerBracketAfterStandardDeductionAndContributionsMarriedSeperateCalculation.CalculateTraditionalRetirement(model)
	incomePerBracketAfterStandardDeductionAndContributionsHeadOfHousehold := c.IncomePerBracketAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation.CalculateTraditionalRetirement(model)

	switch model.Input.RetirementFilingStatus {
	case "single":
		return incomePerBracketAfterStandardDeductionAndContributionsSingle
	case "married-joint":
		return incomePerBracketAfterStandardDeductionAndContributionsMarriedJoint
	case "married-seperate":
		return incomePerBracketAfterStandardDeductionAndContributionsMarriedSeperate
	case "head-of-household":
		return incomePerBracketAfterStandardDeductionAndContributionsHeadOfHousehold
	default:
		return nil
	}
}

func (c IncomePerBracketAfterStandardDeductionAndContributions) CalculateRoth(model *Model) []float64 {
	incomePerBracketAfterStandardDeductionAndContributionsSingle := c.IncomePerBracketAfterStandardDeductionAndContributionsSingleCalculation.CalculateRoth(model)
	incomePerBracketAfterStandardDeductionAndContributionsMarriedJoint := c.IncomePerBracketAfterStandardDeductionAndContributionsMarriedJointCalculation.CalculateRoth(model)
	incomePerBracketAfterStandardDeductionAndContributionsMarriedSeperate := c.IncomePerBracketAfterStandardDeductionAndContributionsMarriedSeperateCalculation.CalculateRoth(model)
	incomePerBracketAfterStandardDeductionAndContributionsHeadOfHousehold := c.IncomePerBracketAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation.CalculateRoth(model)

	switch model.Input.CurrentFilingStatus {
	case "single":
		return incomePerBracketAfterStandardDeductionAndContributionsSingle
	case "married-joint":
		return incomePerBracketAfterStandardDeductionAndContributionsMarriedJoint
	case "married-seperate":
		return incomePerBracketAfterStandardDeductionAndContributionsMarriedSeperate
	case "head-of-household":
		return incomePerBracketAfterStandardDeductionAndContributionsHeadOfHousehold
	default:
		return nil
	}
}

func (c IncomePerBracketAfterStandardDeductionAndContributions) CalculateRothRetirement(model *Model) []float64 {
	incomePerBracketAfterStandardDeductionAndContributionsSingle := c.IncomePerBracketAfterStandardDeductionAndContributionsSingleCalculation.CalculateRothRetirement(model)
	incomePerBracketAfterStandardDeductionAndContributionsMarriedJoint := c.IncomePerBracketAfterStandardDeductionAndContributionsMarriedJointCalculation.CalculateRothRetirement(model)
	incomePerBracketAfterStandardDeductionAndContributionsMarriedSeperate := c.IncomePerBracketAfterStandardDeductionAndContributionsMarriedSeperateCalculation.CalculateRothRetirement(model)
	incomePerBracketAfterStandardDeductionAndContributionsHeadOfHousehold := c.IncomePerBracketAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation.CalculateRothRetirement(model)

	switch model.Input.RetirementFilingStatus {
	case "single":
		return incomePerBracketAfterStandardDeductionAndContributionsSingle
	case "married-joint":
		return incomePerBracketAfterStandardDeductionAndContributionsMarriedJoint
	case "married-seperate":
		return incomePerBracketAfterStandardDeductionAndContributionsMarriedSeperate
	case "head-of-household":
		return incomePerBracketAfterStandardDeductionAndContributionsHeadOfHousehold
	default:
		return nil
	}
}
