package calculator

type TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeparateCalculation Calculation

type TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeparate struct {
	TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeparateCalculation
}

func NewTotalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeparate() TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeparate {
	return TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeparate{
		TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeparateCalculation: NewTaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeparate(),
	}
}

func (c TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeparate) CalculateTraditional(model *Model) float64 {
	taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeparate := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeparateCalculation.CalculateTraditional(model)

	totalTaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeparate := 0.0
	for _, value := range taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeparate {
		totalTaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeparate += value
	}

	return totalTaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeparate
}

func (c TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeparate) CalculateTraditionalRetirement(model *Model) float64 {
	return c.CalculateTraditional(model)
}

func (c TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeparate) CalculateRoth(model *Model) float64 {
	taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeparate := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeparateCalculation.CalculateRoth(model)

	totalTaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeparate := 0.0
	for _, value := range taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeparate {
		totalTaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeparate += value
	}

	return totalTaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeparate

}

func (c TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeparate) CalculateRothRetirement(model *Model) float64 {
	return c.CalculateRoth(model)
}
