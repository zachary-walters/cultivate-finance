package calculator

type TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeperateCalculation Calculation

type TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeperate struct {
	TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperateCalculation
}

func NewTotalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeperate() TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeperate {
	return TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeperate{
		TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperateCalculation: NewTaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperate(),
	}
}

func (c TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeperate) CalculateTraditional(model Model) float64 {
	taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperate := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperateCalculation.CalculateTraditional(model)

	totalTaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperate := 0.0
	for _, value := range taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperate {
		totalTaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperate += value
	}

	return totalTaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperate
}

func (c TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeperate) CalculateTraditionalRetirement(model Model) float64 {
	return c.CalculateTraditional(model)
}

func (c TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeperate) CalculateRoth(model Model) float64 {
	taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperate := c.TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperateCalculation.CalculateRoth(model)

	totalTaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperate := 0.0
	for _, value := range taxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperate {
		totalTaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperate += value
	}

	return totalTaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeperate

}

func (c TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeperate) CalculateRothRetirement(model Model) float64 {
	return c.CalculateRoth(model)
}
