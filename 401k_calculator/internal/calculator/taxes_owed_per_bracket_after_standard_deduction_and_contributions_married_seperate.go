package calculator

type TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeparateCalculation SequenceCalculation

type TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeparate struct {
	IncomePerBracketAfterStandardDeductionAndContributionsMarriedSeparateCalculation
}

func NewTaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeparate() TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeparate {
	return TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeparate{
		IncomePerBracketAfterStandardDeductionAndContributionsMarriedSeparateCalculation: NewIncomePerBracketAfterStandardDeductionAndContributionsMarriedSeparate(),
	}
}

func (c TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeparate) CalculateTraditional(model *Model) []float64 {
	incomePerBracketAfterStandardDeductionAndContributionsMarriedSeparate := c.IncomePerBracketAfterStandardDeductionAndContributionsMarriedSeparateCalculation.CalculateTraditional(model)

	taxesOwedPerBracketAfterStandardDudectionAndContributions := make([]float64, len(model.MarriedSeparateTaxRates))

	for idx, taxRate := range model.MarriedSeparateTaxRates {
		taxesOwedPerBracketAfterStandardDudectionAndContributions[idx] = incomePerBracketAfterStandardDeductionAndContributionsMarriedSeparate[idx] * taxRate.Rate
	}

	return taxesOwedPerBracketAfterStandardDudectionAndContributions
}

func (c TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeparate) CalculateTraditionalRetirement(model *Model) []float64 {
	incomePerBracketAfterStandardDeductionAndContributionsMarriedSeparate := c.IncomePerBracketAfterStandardDeductionAndContributionsMarriedSeparateCalculation.CalculateTraditionalRetirement(model)

	taxesOwedPerBracketAfterStandardDudectionAndContributions := make([]float64, len(model.MarriedSeparateTaxRates))

	for idx, taxRate := range model.MarriedSeparateTaxRates {
		taxesOwedPerBracketAfterStandardDudectionAndContributions[idx] = incomePerBracketAfterStandardDeductionAndContributionsMarriedSeparate[idx] * taxRate.Rate
	}

	return taxesOwedPerBracketAfterStandardDudectionAndContributions
}

func (c TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeparate) CalculateRoth(model *Model) []float64 {
	incomePerBracketAfterStandardDeductionAndContributionsMarriedSeparate := c.IncomePerBracketAfterStandardDeductionAndContributionsMarriedSeparateCalculation.CalculateRoth(model)

	taxesOwedPerBracketAfterStandardDudectionAndContributions := make([]float64, len(model.MarriedSeparateTaxRates))

	for idx, taxRate := range model.MarriedSeparateTaxRates {
		taxesOwedPerBracketAfterStandardDudectionAndContributions[idx] = incomePerBracketAfterStandardDeductionAndContributionsMarriedSeparate[idx] * taxRate.Rate
	}

	return taxesOwedPerBracketAfterStandardDudectionAndContributions
}

func (c TaxesOwedPerBracketAfterStandardDeductionAndContributionsMarriedSeparate) CalculateRothRetirement(model *Model) []float64 {
	incomePerBracketAfterStandardDeductionAndContributionsMarriedSeparate := c.IncomePerBracketAfterStandardDeductionAndContributionsMarriedSeparateCalculation.CalculateRothRetirement(model)

	taxesOwedPerBracketAfterStandardDudectionAndContributions := make([]float64, len(model.MarriedSeparateTaxRates))

	for idx, taxRate := range model.MarriedSeparateTaxRates {
		taxesOwedPerBracketAfterStandardDudectionAndContributions[idx] = incomePerBracketAfterStandardDeductionAndContributionsMarriedSeparate[idx] * taxRate.Rate
	}

	return taxesOwedPerBracketAfterStandardDudectionAndContributions
}
