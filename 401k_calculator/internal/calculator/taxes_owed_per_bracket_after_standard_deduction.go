package calculator

type TaxesOwedPerBracketAfterStandardDeductionCalculation SequenceCalculation

type TaxesOwedPerBracketAfterStandardDeduction struct {
	TaxesOwedPerBracketAfterStandardDeductionSingleCalculation
	TaxesOwedPerBracketAfterStandardDeductionMarriedJointCalculation
	TaxesOwedPerBracketAfterStandardDeductionMarriedSeparateCalculation
	TaxesOwedPerBracketAfterStandardDeductionHeadOfHouseholdCalculation
}

func NewTaxesOwedPerBracketAfterStandardDeduction() TaxesOwedPerBracketAfterStandardDeduction {
	return TaxesOwedPerBracketAfterStandardDeduction{
		TaxesOwedPerBracketAfterStandardDeductionSingleCalculation:          NewTaxesOwedPerBracketAfterStandardDeductionSingle(),
		TaxesOwedPerBracketAfterStandardDeductionMarriedJointCalculation:    NewTaxesOwedPerBracketAfterStandardDeductionMarriedJoint(),
		TaxesOwedPerBracketAfterStandardDeductionMarriedSeparateCalculation: NewTaxesOwedPerBracketAfterStandardDeductionMarriedSeparate(),
		TaxesOwedPerBracketAfterStandardDeductionHeadOfHouseholdCalculation: NewTaxesOwedPerBracketAfterStandardDeductionHeadOfHousehold(),
	}
}

func (c TaxesOwedPerBracketAfterStandardDeduction) CalculateTraditional(model *Model) []float64 {
	taxesOwedPerBracketAfterStandardDeductionSingle := c.TaxesOwedPerBracketAfterStandardDeductionSingleCalculation.CalculateTraditional(model)
	taxesOwedPerBracketAfterStandardDeductionMarriedJoint := c.TaxesOwedPerBracketAfterStandardDeductionMarriedJointCalculation.CalculateTraditional(model)
	taxesOwedPerBracketAfterStandardDeductionMarriedSeparate := c.TaxesOwedPerBracketAfterStandardDeductionMarriedSeparateCalculation.CalculateTraditional(model)
	taxesOwedPerBracketAfterStandardDeductionHeadOfHousehold := c.TaxesOwedPerBracketAfterStandardDeductionHeadOfHouseholdCalculation.CalculateTraditional(model)

	switch model.Input.CurrentFilingStatus {
	case "single":
		return taxesOwedPerBracketAfterStandardDeductionSingle
	case "married-joint":
		return taxesOwedPerBracketAfterStandardDeductionMarriedJoint
	case "married-seperate":
		return taxesOwedPerBracketAfterStandardDeductionMarriedSeparate
	case "head-of-household":
		return taxesOwedPerBracketAfterStandardDeductionHeadOfHousehold
	default:
		return nil
	}
}

func (c TaxesOwedPerBracketAfterStandardDeduction) CalculateTraditionalRetirement(model *Model) []float64 {
	taxesOwedPerBracketAfterStandardDeductionSingle := c.TaxesOwedPerBracketAfterStandardDeductionSingleCalculation.CalculateTraditionalRetirement(model)
	taxesOwedPerBracketAfterStandardDeductionMarriedJoint := c.TaxesOwedPerBracketAfterStandardDeductionMarriedJointCalculation.CalculateTraditionalRetirement(model)
	taxesOwedPerBracketAfterStandardDeductionMarriedSeparate := c.TaxesOwedPerBracketAfterStandardDeductionMarriedSeparateCalculation.CalculateTraditionalRetirement(model)
	taxesOwedPerBracketAfterStandardDeductionHeadOfHousehold := c.TaxesOwedPerBracketAfterStandardDeductionHeadOfHouseholdCalculation.CalculateTraditionalRetirement(model)

	switch model.Input.RetirementFilingStatus {
	case "single":
		return taxesOwedPerBracketAfterStandardDeductionSingle
	case "married-joint":
		return taxesOwedPerBracketAfterStandardDeductionMarriedJoint
	case "married-seperate":
		return taxesOwedPerBracketAfterStandardDeductionMarriedSeparate
	case "head-of-household":
		return taxesOwedPerBracketAfterStandardDeductionHeadOfHousehold
	default:
		return nil
	}
}

func (c TaxesOwedPerBracketAfterStandardDeduction) CalculateRoth(model *Model) []float64 {
	taxesOwedPerBracketAfterStandardDeductionSingle := c.TaxesOwedPerBracketAfterStandardDeductionSingleCalculation.CalculateRoth(model)
	taxesOwedPerBracketAfterStandardDeductionMarriedJoint := c.TaxesOwedPerBracketAfterStandardDeductionMarriedJointCalculation.CalculateRoth(model)
	taxesOwedPerBracketAfterStandardDeductionMarriedSeparate := c.TaxesOwedPerBracketAfterStandardDeductionMarriedSeparateCalculation.CalculateRoth(model)
	taxesOwedPerBracketAfterStandardDeductionHeadOfHousehold := c.TaxesOwedPerBracketAfterStandardDeductionHeadOfHouseholdCalculation.CalculateRoth(model)

	switch model.Input.CurrentFilingStatus {
	case "single":
		return taxesOwedPerBracketAfterStandardDeductionSingle
	case "married-joint":
		return taxesOwedPerBracketAfterStandardDeductionMarriedJoint
	case "married-seperate":
		return taxesOwedPerBracketAfterStandardDeductionMarriedSeparate
	case "head-of-household":
		return taxesOwedPerBracketAfterStandardDeductionHeadOfHousehold
	default:
		return nil
	}
}

func (c TaxesOwedPerBracketAfterStandardDeduction) CalculateRothRetirement(model *Model) []float64 {
	taxesOwedPerBracketAfterStandardDeductionSingle := c.TaxesOwedPerBracketAfterStandardDeductionSingleCalculation.CalculateRothRetirement(model)
	taxesOwedPerBracketAfterStandardDeductionMarriedJoint := c.TaxesOwedPerBracketAfterStandardDeductionMarriedJointCalculation.CalculateRothRetirement(model)
	taxesOwedPerBracketAfterStandardDeductionMarriedSeparate := c.TaxesOwedPerBracketAfterStandardDeductionMarriedSeparateCalculation.CalculateRothRetirement(model)
	taxesOwedPerBracketAfterStandardDeductionHeadOfHousehold := c.TaxesOwedPerBracketAfterStandardDeductionHeadOfHouseholdCalculation.CalculateRothRetirement(model)

	switch model.Input.RetirementFilingStatus {
	case "single":
		return taxesOwedPerBracketAfterStandardDeductionSingle
	case "married-joint":
		return taxesOwedPerBracketAfterStandardDeductionMarriedJoint
	case "married-seperate":
		return taxesOwedPerBracketAfterStandardDeductionMarriedSeparate
	case "head-of-household":
		return taxesOwedPerBracketAfterStandardDeductionHeadOfHousehold
	default:
		return nil
	}
}
