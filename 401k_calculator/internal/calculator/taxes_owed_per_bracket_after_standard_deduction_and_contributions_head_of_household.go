package calculator

type TaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation SequenceCalculation

type TaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold struct {
	IncomePerBracketAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation
}

func NewTaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold() TaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold {
	return TaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold{
		IncomePerBracketAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation: NewIncomePerBracketAfterStandardDeductionAndContributionsHeadOfHousehold(),
	}
}

func (c TaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold) CalculateTraditional(model Model) []float64 {
	incomePerBracketAfterStandardDeductionAndContributionsHeadOfHousehold := c.IncomePerBracketAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation.CalculateTraditional(model)

	taxesOwedPerBracketAfterStandardDudectionAndContributions := make([]float64, len(model.HeadOfHouseholdTaxRates))

	for idx, taxRate := range model.HeadOfHouseholdTaxRates {
		taxesOwedPerBracketAfterStandardDudectionAndContributions[idx] = incomePerBracketAfterStandardDeductionAndContributionsHeadOfHousehold[idx] * taxRate.Rate
	}

	return taxesOwedPerBracketAfterStandardDudectionAndContributions
}

func (c TaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold) CalculateTraditionalRetirement(model Model) []float64 {
	incomePerBracketAfterStandardDeductionAndContributionsHeadOfHousehold := c.IncomePerBracketAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation.CalculateTraditionalRetirement(model)

	taxesOwedPerBracketAfterStandardDudectionAndContributions := make([]float64, len(model.HeadOfHouseholdTaxRates))

	for idx, taxRate := range model.HeadOfHouseholdTaxRates {
		taxesOwedPerBracketAfterStandardDudectionAndContributions[idx] = incomePerBracketAfterStandardDeductionAndContributionsHeadOfHousehold[idx] * taxRate.Rate
	}

	return taxesOwedPerBracketAfterStandardDudectionAndContributions
}

func (c TaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold) CalculateRoth(model Model) []float64 {
	incomePerBracketAfterStandardDeductionAndContributionsHeadOfHousehold := c.IncomePerBracketAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation.CalculateRoth(model)

	taxesOwedPerBracketAfterStandardDudectionAndContributions := make([]float64, len(model.HeadOfHouseholdTaxRates))

	for idx, taxRate := range model.HeadOfHouseholdTaxRates {
		taxesOwedPerBracketAfterStandardDudectionAndContributions[idx] = incomePerBracketAfterStandardDeductionAndContributionsHeadOfHousehold[idx] * taxRate.Rate
	}

	return taxesOwedPerBracketAfterStandardDudectionAndContributions
}

func (c TaxesOwedPerBracketAfterStandardDeductionAndContributionsHeadOfHousehold) CalculateRothRetirement(model Model) []float64 {
	incomePerBracketAfterStandardDeductionAndContributionsHeadOfHousehold := c.IncomePerBracketAfterStandardDeductionAndContributionsHeadOfHouseholdCalculation.CalculateRothRetirement(model)

	taxesOwedPerBracketAfterStandardDudectionAndContributions := make([]float64, len(model.HeadOfHouseholdTaxRates))

	for idx, taxRate := range model.HeadOfHouseholdTaxRates {
		taxesOwedPerBracketAfterStandardDudectionAndContributions[idx] = incomePerBracketAfterStandardDeductionAndContributionsHeadOfHousehold[idx] * taxRate.Rate
	}

	return taxesOwedPerBracketAfterStandardDudectionAndContributions
}
