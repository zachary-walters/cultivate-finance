package calculator

type IncomePerBracketAfterStandardDeductionAndContributionsSingleCalculation SequenceCalculation

type IncomePerBracketAfterStandardDeductionAndContributionsSingle struct {
	AbstractIncomePerBracketAfterStandardDeductionAndContributionsCalculation
}

func NewIncomePerBracketAfterStandardDeductionAndContributionsSingle() IncomePerBracketAfterStandardDeductionAndContributionsSingle {
	return IncomePerBracketAfterStandardDeductionAndContributionsSingle{
		AbstractIncomePerBracketAfterStandardDeductionAndContributionsCalculation: NewAbstractIncomePerBracketAfterStandardDeductionAndContributions(),
	}
}

func (c IncomePerBracketAfterStandardDeductionAndContributionsSingle) CalculateTraditional(model Model) []float64 {
	return c.AbstractIncomePerBracketAfterStandardDeductionAndContributionsCalculation.CalculateTraditional(model, model.SingleTaxRates)
}

func (c IncomePerBracketAfterStandardDeductionAndContributionsSingle) CalculateTraditionalRetirement(model Model) []float64 {
	return c.AbstractIncomePerBracketAfterStandardDeductionAndContributionsCalculation.CalculateTraditionalRetirement(model, model.SingleTaxRates)
}

func (c IncomePerBracketAfterStandardDeductionAndContributionsSingle) CalculateRoth(model Model) []float64 {
	return c.AbstractIncomePerBracketAfterStandardDeductionAndContributionsCalculation.CalculateRoth(model, model.SingleTaxRates)
}

func (c IncomePerBracketAfterStandardDeductionAndContributionsSingle) CalculateRothRetirement(model Model) []float64 {
	return c.AbstractIncomePerBracketAfterStandardDeductionAndContributionsCalculation.CalculateRothRetirement(model, model.SingleTaxRates)
}
