package calculator

type TotalTaxesOwedAfterStandardDeductionAndContributionsCalculation Calculation

type TotalTaxesOwedAfterStandardDeductionAndContributions struct {
	TotalTaxesOwedAfterStandardDeductionAndContributionsSingleCalculation
	TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedJointCalculation
	TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeperateCalculation
}

func NewTotalTaxesOwedAfterStandardDeductionAndContributions() TotalTaxesOwedAfterStandardDeductionAndContributions {
	return TotalTaxesOwedAfterStandardDeductionAndContributions{
		TotalTaxesOwedAfterStandardDeductionAndContributionsSingleCalculation:          NewTotalTaxesOwedAfterStandardDeductionAndContributionsSingle(),
		TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedJointCalculation:    NewTotalTaxesOwedAfterStandardDeductionAndContributionsMarriedJoint(),
		TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeperateCalculation: NewTotalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeperate(),
	}
}

func (c TotalTaxesOwedAfterStandardDeductionAndContributions) Calculate(model Model) float64 {
	totalTaxesOwedAfterStandardDeductionAndContributionsSingle := c.TotalTaxesOwedAfterStandardDeductionAndContributionsSingleCalculation.Calculate(model)
	totalTaxesOwedAfterStandardDeductionAndContributionsMarriedJoint := c.TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedJointCalculation.Calculate(model)
	totalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeperate := c.TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeperateCalculation.Calculate(model)

	switch model.Input.CurrentFilingStatus {
	case "single":
		return totalTaxesOwedAfterStandardDeductionAndContributionsSingle
	case "married-joint":
		return totalTaxesOwedAfterStandardDeductionAndContributionsMarriedJoint
	case "married-seperate":
		return totalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeperate
	default:
		return 0.0
	}
}

func (c TotalTaxesOwedAfterStandardDeductionAndContributions) CalculateRetirement(model Model) float64 {
	totalTaxesOwedAfterStandardDeductionAndContributionsSingle := c.TotalTaxesOwedAfterStandardDeductionAndContributionsSingleCalculation.CalculateRetirement(model)
	totalTaxesOwedAfterStandardDeductionAndContributionsMarriedJoint := c.TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedJointCalculation.CalculateRetirement(model)
	totalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeperate := c.TotalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeperateCalculation.CalculateRetirement(model)

	switch model.Input.CurrentFilingStatus {
	case "single":
		return totalTaxesOwedAfterStandardDeductionAndContributionsSingle
	case "married-joint":
		return totalTaxesOwedAfterStandardDeductionAndContributionsMarriedJoint
	case "married-seperate":
		return totalTaxesOwedAfterStandardDeductionAndContributionsMarriedSeperate
	default:
		return 0.0
	}
}
